Создайте модель для запоминания бросков монеты: орёл или решка.
Также запоминайте время броска
from random import randint

from django.core.management import BaseCommand

from seminar_app.models import GameModel


class Command(BaseCommand):
    help = 'Play game Head and Tails'

    def handle(self, *args, **kwargs):
        result = ('TAILS', 'HEADS')[randint(0, 1)]

        game = GameModel(result=result)
        game.save()

        self.stdout.write(f'{game}')


 from django.db import models


class GameModel(models.Model):
    result = models.CharField(max_length=10)
    played = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Результат игры: {self.result}, время: {self.played}'
Доработаем задачу 1.
Добавьте статический метод для статистики по n последним броскам монеты.
Метод должен возвращать словарь с парой ключей-значений, для орла и для решки.

from django.db import models
from django.db.models import Manager


class GameModel(models.Model):
    result = models.CharField(max_length=10)
    played = models.DateTimeField(auto_now_add=True)

    objects = Manager()

    def __str__(self):
        return f'Результат игры: {self.result}, время: {self.played}'

    class Meta:
        ordering = ['-played']

    @staticmethod
    def return_last(n):
        return GameModel.objects.all()[:n]

from random import randint

from django.http import HttpResponse
from django.shortcuts import render

from seminar_app.models import GameModel


def index(request):
    result = ('TAILS', 'HEADS')[randint(0, 1)]

    game = GameModel(result=result)
    game.save()

    return HttpResponse(f'{game}')


def last_games(request):
    last = GameModel().return_last(5)
    last_str = ['<br>' + str(i) for i in last]
    return HttpResponse(last_str)


Создайте модель Автор. Модель должна содержать следующие поля:
имя до 100 символов
фамилия до 100 символов
почта
биография
день рождения
Дополнительно создай пользовательское поле “полное имя”, которое возвращает имя и фамилию.

models
from django.db import models


# Create your models here.
class Author(models.Model):
    name = models.CharField(max_length=100)
    surname = models.CharField(max_length=100)
    email = models.EmailField()
    bio = models.TextField(max_length=1000)
    bd = models.DateField()

    def __str__(self):
        return f'{self.name} {self.surname}'

views
#view
from django.http import HttpResponse
from django.shortcuts import render

from blog.models import Author


# Create your views here.

def autor(request):
    res = Author.objects.all()
    print(res)
    res1 = ''
    for i in res:
        res1 += str(i) + '<br>'
    return HttpResponse(f'{res1}')

#urls

from django.urls import path
from . import views


urlpatterns = [
    path('author/', views.autor, name='author'),

    ]


Создайте модель Статья (публикация). Авторы из прошлой задачи могут писать статьи.
У статьи может быть только один автор.
У статьи должны быть следующие обязательные поля:
заголовок статьи с максимальной длиной 200 символов
содержание статьи
дата публикации статьи
автор статьи с удалением связанных объектов при удалении автора
категория статьи с максимальной длиной 100 символов
количество просмотров статьи со значением по умолчанию 0
флаг, указывающий, опубликована ли статья со значением по умолчанию False

class Category(models.Model):
    name = models.CharField(max_length=100)


class Post(models.Model):
    title = models.CharField(max_length=200)
    post = models.TextField(max_length=1000)
    publish_date = models.DateField(auto_now_add=True)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.DO_NOTHING)
    views = models.IntegerField(default=0)
    publish = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.author} - {self.title} - {self.publish}'

#fake_post
import random

from django.core.management.base import BaseCommand
from blog.models import Post, Author, Category


class Command(BaseCommand):
    help = "Generate fake authors."

    def add_arguments(self, parser):
        parser.add_argument('count', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        count = kwargs.get('count')
        for c in Category.objects.all():
            for a in Author.objects.all():
                for i in range(1, count + 1):
                    post = Post(title=f'title{i}',
                                post=f'post{i}',
                                publish_date='2000-01-01',
                                # author=random.randint(1, 7),
                                author=a,
                                category=c,
                                views=random.randint(1, 1000),
                                publish=random.randint(0, 1))
                post.save()

#fake_category

#category

import random

from django.core.management.base import BaseCommand
from blog.models import Category


class Command(BaseCommand):
    help = "Generate fake authors."

    def add_arguments(self, parser):
        parser.add_argument('count', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        count = kwargs.get('count')
        for i in range(1, count + 1):
            category = Category(name=f'Category{random.randint(1, 10)}')
            category.save()

Доработаем задачу 4.
Создай четыре функции для реализации CRUD в модели Django Article (статья).

*Используйте Django команды для вызова функций.

##AUTHOR

import random

from django.core.management.base import BaseCommand
from blog.models import Author


class Command(BaseCommand):
    help = "Generate fake authors."

    def add_arguments(self, parser):
        parser.add_argument('count', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        count = kwargs.get('count')
        for i in range(1, count + 1):
            author = Author(name=f'Name{i}',
                            surname=f'Surname{i}',
                            email=f'mail{i}@mail.ru',
                            bio='JLHDSGFJLHSGFJDSGFL',
                            bd='2000-01-01')
            author.save()
#############################################
from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = 'Get all posts'

    def handle(self, *args, **kwargs):
        posts = Post.objects.all()

        self.stdout.write(f'{posts}')

from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = 'Get posts'

    def add_arguments(self, parser):
        parser.add_argument('pk', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        pk = kwargs.get('pk')
        post = Post.objects.get(pk=pk)

        self.stdout.write(f'{post}')

from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = "Update post title by id."

    def add_arguments(self, parser):
        parser.add_argument('pk', type=int, help='User ID')
        parser.add_argument('title', type=str, help='post title')

    def handle(self, *args, **kwargs):
        pk = kwargs.get('pk')
        title = kwargs.get('title')
        post = Post.objects.filter(pk=pk).first()
        post.title = title
        post.save()
        self.stdout.write(f'{post}')

20:53
from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = "Delete post title by id."

    def add_arguments(self, parser):
        parser.add_argument('pk', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        pk = kwargs.get('pk')
        post = Post.objects.filter(pk=pk).first()
        post.delete()
        self.stdout.write(f'Deleted {post}')


from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = 'Get all posts'

    def handle(self, *args, **kwargs):
        posts = Post.objects.all()

        self.stdout.write(f'{posts}')

from django.core.management import BaseCommand

from seminar_app.models import Post


class Command(BaseCommand):
    help = 'Get posts'

    def add_arguments(self, parser):
        parser.add_argument('pk', type=int, help='User ID')

    def handle(self, *args, **kwargs):
        pk = kwargs.get('pk')
        post = Post.objects.get(pk=pk)

        self.stdout.write(f'{post}')

